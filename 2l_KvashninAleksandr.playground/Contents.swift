import Foundation


/*
 Домашнее задание:
 
****************************************************************************
 1. Написать функцию, которая определяет, четное число или нет.
****************************************************************************
 */
 

func divideNum (num: Int, divider: Int = 2) -> Bool {
    if num % divider == 0 {
        return true
    } else {
        return false
    }
}
//функция divideNum при работе без второго аргумента (по умолчанию - 2) возвращает TRUE или FALSE если чесло четное или нет, соотвественно

//ПРИМЕРЫ
divideNum(num: 9)
//false
divideNum(num: 8)
//true

 
/*
 ****************************************************************************
 2. Написать функцию, которая определяет, делится ли число без остатка на 3.
 ****************************************************************************
 */

//функция divideNum при работе со вторым аргументом равным 3 (по умолчанию - 2) возвращает TRUE или FALSE если чесло делится без остатка или не делится, соотвественно

//ПРИМЕРЫ
divideNum(num: 8, divider: 3)
//false
divideNum(num: 33, divider: 3)
//true


 /*
 ****************************************************************************
 3. Создать возрастающий массив из 100 чисел.
 ****************************************************************************
 */

//создадим функцию, создающую (заполняющую) возрастающий массив (начинающийся с 1) из заданного количества чисел

func makeArr (arr: inout Array<Int>, num: Int) {

    for index in 1...num {
        arr.append(index)
    }
}

//c использованием созданной функции создадим возрастающий массив из 100 чисел

var anyArray: Array<Int> = []
    
makeArr(arr: &anyArray, num: 100)

//ПРОВЕРКА
print(anyArray)


 /*
  ****************************************************************************
 4. Удалить из этого массива все четные числа и все числа, которые не делятся на 3.
  ****************************************************************************
 */

//создадим функцию, которая удаляет из массива все числа, которые делятся на заданное число (по умолчанию - 2)

func clearArr (arr: inout Array<Int>, divider: Int = 2) {
    
    for index in stride(from: arr.count-1, through: 0, by: -1) {
        if divideNum(num: arr[index], divider: divider) {
            arr.remove(at: index)
        }
    }
}


//Удалим все четные числа, используя разработанную функцию:
clearArr(arr: &anyArray)

//Удалим все числа, которые делятся на 3:
clearArr(arr: &anyArray, divider: 3)

//ПРОВЕРКА РЕЗУЛЬТАТА
print(anyArray)


 /*
****************************************************************************
 5. * Написать функцию, которая добавляет в массив новое число Фибоначчи, и добавить при помощи нее 100 элементов.
 Числа Фибоначчи определяются соотношениями Fn=Fn-1 + Fn-2.
****************************************************************************
 */
 
 //напишем функцию по формированию массива из чисел Фибоначи из заданного количества элементов (ВНИМАНИЕ! В связи с большими значениями чисел Фибоначи при номере элемента более 90 в функции применены переменные типа Double

func arrFibo (num: Int) -> Array<Double> {
    
    var arr: Array<Double> = []
 
//проверяем больше ли нуля и создаем первое число Фибоначи:
    if num>0 {
        arr.append(1)
    } else {
        print("Слишком малое количество элементов. ОШИБКА!!")
    }
    
//немного криво создаем второе число из ряда элементов Фибоначи:
    if num>1 {
        arr.append(1)
    }
    
//заполняем весь массив оставшимися элементами
    if num>2 {
        for index in 2...num-1 {
            arr.append(arr[index-1]+arr[index-2])
        }
    }
    return arr
}


//создаем массим и заполняем его элементами ряда Фибоначи
var arrFiboNum: Array<Double> = []
arrFiboNum = arrFibo(num: 100)


//ПРОВЕРКА РЕЗУЛЬТАТА
print("Массив чисел Фибоначчи \(arrFiboNum) ")



/*
 ****************************************************************************
 6. * Заполнить массив из 100 элементов различными простыми числами. Натуральное число, большее единицы, называется простым, если оно делится только на себя и на единицу. Для нахождения всех простых чисел не больше заданного числа n, следуя методу Эратосфена, нужно выполнить следующие шаги:
 a. Выписать подряд все целые числа от двух до n (2, 3, 4, ..., n).
 b. Пусть переменная p изначально равна двум — первому простому числу.
 c. Зачеркнуть в списке числа от 2p до n, считая шагами по p (это будут числа, кратные p: 2p, 3p, 4p, ...).
 d. Найти первое не зачёркнутое число в списке, большее, чем p, и присвоить значению переменной p это число.
 e. Повторять шаги c и d, пока возможно.
 ****************************************************************************
 */

//ВНИМАНИЕ!  В решении поставленной задачи применяется алгоритм БЕЗ метода Эрастрофена

//для начала создадим функцию для определения простоты проверяемого числа

func checkProsto (num: Int) -> Bool {
    
    var rezult: Bool = true
    
    if num < 2 {
        rezult = false
    }
    
    if num > 3 {
        for index in 2...Int(num/2) {
        //((num-num%2)%2) {
            if num%index == 0 {
                rezult = false
                break
            }
        }
    }
    return rezult
}

//ПРОВЕРКА
checkProsto(num: 3)
checkProsto(num: 5)
checkProsto(num: 7)
checkProsto(num: 8)
checkProsto(num: 23)
checkProsto(num: 44)
checkProsto(num: 404)

//создами функцию, которая будет создавать массив простых чисел заданной длины

func arrProsto (num: Int) -> Array<Int> {
    
    var arr: Array<Int> = []
    var chislo: Int = 3
    
    if num>0 {
        arr.append(2)
        print(arr.count)
    }
    
    while arr.count<num {
    
        if checkProsto(num: chislo) {
            arr.append(chislo)
        }
        
    chislo+=1
    }
    
    return arr
}

//создаем массим и заполняем его простыми числами

var arrProstoNum: Array<Int> = arrProsto(num: 100)

//ПРОВЕРКА РЕЗУЛЬТАТА
print("Массив простых чисел \(arrProstoNum) ")


